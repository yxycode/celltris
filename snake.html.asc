<html>
<head>
</head>

<body style="color: white; background-color: black;" alink="white" link="white" vlink="white" >

<center>
<canvas id="MainCanvas" width="440px" height="440px">
Error: Your browser does not support HTML5 Canvas!
</canvas>
</center>
<br>   

<script type="text/javascript" >
//--------------------------------------------------------------------------------------- 
// *** global variables ***

var MainCanvas = document.getElementById('MainCanvas');
var MainContext = MainCanvas.getContext('2d');
//MainContext.scale(1.0,1.0);
//MainCanvas.style.width = "300px";
//MainCanvas.style.height= "300px";
//MainContext.font = "bold 12pt Arial";
//MainContext.fillStyle = "rgb(200,200,255)";
 
var CANVAS_WIDTH = 440, CANVAS_HEIGHT = 440;

var upflag, downflag, leftflag, rightflag;
var MouseX = 0, MouseY = 0, MouseDownFlag = 0;

var DemoFlag = 0;
var TurnDemoOff_Flag = 0;

//---------------------------------------------------------------------------------------  
//*** image variables *** 

var MAX_IMAGES;
var ImagesLoadedFlag = 0;

var ThePictureList = new Array();
//--------------------------------------------------------------------------------------- 
function LoadPictures()
{
  var ImageNameStr = "head_n.png,head_e.png,head_s.png,head_w.png,";
  ImageNameStr += "body_n.png,body_e.png,body_s.png,body_w.png,";
  ImageNameStr += "tail_n.png,tail_e.png,tail_s.png,tail_w.png,";
  ImageNameStr += "bg_green1.png,bg_green2.png,bg_green3.png,bg_green4.png,bg_green5.png,";
  ImageNameStr += "hard.png,food.png,";
  ImageNameStr += "body_se.png,body_ne.png,body_sw.png,body_nw.png";
  
  var FileList = ImageNameStr.split(",");
  MAX_IMAGES = FileList.length;
  
  var i;
  for( i = 0; i < MAX_IMAGES; i++ )
     {
       ThePictureList[i] = new Image();
       ThePictureList[i].src = FileList[i];
     }
}
//--------------------------------------------------------------------------------------- 
LoadPictures();

ThePictureList[MAX_IMAGES - 1].onload = function()
{
  ImagesLoadedFlag = 1;
}
//--------------------------------------------------------------------------------------- 
//*** sound variables ***

var Sound1 = new Audio("14.wav");
var Sound2 = new Audio("11.wav");

//--------------------------------------------------------------------------------------- 
function DoKeyDown(dEvent)
{ 
 switch (dEvent.keyCode)
  {
        case 38: // up
          upflag = 1;
          break;
        case 40: // down
          downflag = 1;
          break;
        case 37: // left 
          leftflag = 1;
          break;
        case 39: // right
          rightflag = 1;
          break;
        case 65: // a          
          break;
        case 83: // s
          break;
        case 68: // d
          break;
        case 70: // f
          break;
        default:
          //alert(keycode);  
          break;  
  };
}

//---------------------------------------------------------------------------------------  
function DoKeyUp(dEvent)
{   
   switch(dEvent.keyCode)
     {
        case 38: // up
          upflag = 0;
          break;
        case 40: // down
          downflag = 0;
          break;
        case 37: // left 
          leftflag = 0;
          break;
        case 39: // right
          rightflag = 0;
          break;
        default:  
          break;
     }   
}
//---------------------------------------------------------------------------------------
function MyMouseDown(e)
{
  MouseX= e.pageX - MainCanvas.offsetLeft;
  MouseY = e.pageY - MainCanvas.offsetTop;
  MouseDownFlag = 1;
  TurnDemoOff_Flag = 1;
}
//---------------------------------------------------------------------------------------
function MyMouseUp()
{
   MouseDownFlag = 0;
}
//---------------------------------------------------------------------------------------
window.addEventListener('keydown',DoKeyDown,true);
window.addEventListener('keyup', DoKeyUp,true);


MainCanvas.onmousedown = MyMouseDown;
MainCanvas.onmouseup = MyMouseUp;

//--------------------------------------------------------------------------------------- 
function Random( min, max )
{
  return Math.floor((Math.random() * (max + 1 - min)) + min);
}
//--------------------------------------------------------------------------------------- 

var LIVE_CELL_WIDTH = 20;
var GRID_WIDTH = CANVAS_WIDTH / LIVE_CELL_WIDTH;
var GRID_HEIGHT = CANVAS_HEIGHT / LIVE_CELL_WIDTH;
var DIR_NORTH = 1;
var DIR_EAST = 2;
var DIR_SOUTH = 3;
var DIR_WEST = 4;

var MAX_CREATURE_SEGMENTS = 200;
var HEAD_CELL = 1;
var BODY_CELL = 2;
var TAIL_CELL = 3;
var FOOD_CELL = 4;
var HARD_CELL = 5;

var COLLIDE_OBSTACLE_FLAG = 1;
var COLLIDE_BOUNDARY_FLAG = 2;
var COLLIDE_FOOD_FLAG = 3;

var HEAD_CELL_INDEX = 0;

var LiveCellList = new Array();
var BackGroundGraphicIndexList = new Array();

//--------------------------------------------------------------------------------------- 

function LiveCell() {}

LiveCell.prototype.Id = 0;
LiveCell.prototype.Index = -1;
LiveCell.prototype.OwnerIndex = -1;
LiveCell.prototype.ImageIndex = 0;
LiveCell.prototype.X = 0;
LiveCell.prototype.Y = 0;
LiveCell.prototype.Direction = 0;
LiveCell.prototype.Xdir = 0;
LiveCell.prototype.Ydir = 0;
LiveCell.prototype.Speed = 5;
LiveCell.prototype.MoveCount = 0;
LiveCell.prototype.Duration = 0;
LiveCell.prototype.SetGridPosition = LC_SetGridPosition;
LiveCell.prototype.Move = LC_Move;
LiveCell.prototype.ChangeDirection = LC_ChangeDirection;
LiveCell.prototype.Draw = LC_Draw;
LiveCell.prototype.CheckOutside = LC_CheckOutside;
LiveCell.prototype.Length = 3;
LiveCell.prototype.CollideFlag = 0;
LiveCell.prototype.PredecessorIndex = -1;
LiveCell.prototype.NewestSpawnIndex = -1;

//---------------------------------------------------------------------------------------
function LC_SetGridPosition( X, Y )
{
  this.X = X * LIVE_CELL_WIDTH;
  this.Y = Y * LIVE_CELL_WIDTH;
}
//---------------------------------------------------------------------------------------
function CheckDirectOpposite( Direction1, Direction2 )
{
  var DirectOpposite = [ 0, DIR_SOUTH, DIR_WEST, DIR_NORTH, DIR_EAST ];
  
  if( DirectOpposite[Direction1] == Direction2 )
      return 1;
  else
      return 0;
} 
//--------------------------------------------------------------------------------------- 
function LC_Move()
{
  var GridX, GridY;
  var debugout = document.getElementById('debugout');
  
  if( this.MoveCount < LIVE_CELL_WIDTH )
    {   
      this.BorderCrossedFlag = 0;
      this.X += this.Xdir * this.Speed;
      this.Y += this.Ydir * this.Speed;
      
      GridX = Math.floor(this.X/LIVE_CELL_WIDTH);
      GridY = Math.floor(this.Y/LIVE_CELL_WIDTH);
          
      this.MoveCount += this.Speed;
    }
  else
    { 
       GridX = Math.floor(this.X/LIVE_CELL_WIDTH);
       GridY = Math.floor(this.Y/LIVE_CELL_WIDTH);    
       this.MoveCount = 0;
       this.BorderCrossedFlag = 1;

       if( !Random(0,3) && DemoFlag )
           this.ChangeDirection(0,1);

     if( this.Id == HEAD_CELL )
      {
      if( !DemoFlag )           
       {
       if( upflag )      
        if(!CheckDirectOpposite(this.Direction,DIR_NORTH))
         this.ChangeDirection(DIR_NORTH,0);           
       if( downflag )
        if(!CheckDirectOpposite(this.Direction,DIR_SOUTH))
         this.ChangeDirection(DIR_SOUTH,0);
       if( leftflag )
        if(!CheckDirectOpposite(this.Direction,DIR_WEST))
          this.ChangeDirection(DIR_WEST,0);
       if( rightflag )
         if(!CheckDirectOpposite(this.Direction,DIR_EAST))
           this.ChangeDirection(DIR_EAST,0);  
       }
       SpawnBodyCell( LiveCellList, this.Length, this.Direction, GridX, GridY, this.Index ); 
     }
    }
}
//--------------------------------------------------------------------------------------- 
function LC_ChangeDirection( Dir, Op )
{

if( Op == 0 )
 { 
  switch(Dir)
   { 
     case DIR_NORTH:
       this.Direction = DIR_NORTH;
       this.Xdir = 0; this.Ydir = -1;
       break;
     case DIR_EAST:
       this.Direction = DIR_EAST;
       this.Xdir = 1; this.Ydir = 0;
       break;     
     case DIR_SOUTH:
       this.Direction = DIR_SOUTH;
       this.Xdir = 0; this.Ydir = 1;
       break;     
     case DIR_WEST:
       this.Direction = DIR_WEST;
       this.Xdir = -1; this.Ydir = 0;
       break;     
     default:
       break;
   };
 }
else
if( Op == 1 )
 {
    var DirectOpposite = [ 0, DIR_SOUTH, DIR_WEST, DIR_NORTH, DIR_EAST ]; 
    var NewDirList = new Array();
    var i, k = 0;
    var Direction;
    
    if( Dir > 0 )
        Direction = Dir;
    else
        Direction = this.Direction;
        
    for( i = 1; i < DirectOpposite.length; i++ )
      if( i != Direction )
        {
          NewDirList[k] = DirectOpposite[i];
          k++;
        }

    this.Direction = NewDirList[Random( 0, NewDirList.length - 1 )];
    this.ChangeDirection(this.Direction,0);
 }
 
}
//--------------------------------------------------------------------------------------- 
function LC_Draw()
{
   MainContext.drawImage( ThePictureList[this.ImageIndex], this.X, this.Y );
}
//--------------------------------------------------------------------------------------- 
function LC_CheckOutside()
{
   var GridX, GridY;
   
   GridX = Math.floor(this.X/LIVE_CELL_WIDTH);
   GridY = Math.floor(this.Y/LIVE_CELL_WIDTH);
   this.CollideFlag = 0;
   
   if( this.X > LIVE_CELL_WIDTH * (GRID_WIDTH-1))
     {
       this.X = LIVE_CELL_WIDTH * (GRID_WIDTH-1); 
       this.CollideFlag = COLLIDE_BOUNDARY_FLAG;
     }  
   if( this.Y > LIVE_CELL_WIDTH * (GRID_HEIGHT-1))
     {
       this.Y = LIVE_CELL_WIDTH * (GRID_HEIGHT-1);             
       this.CollideFlag = COLLIDE_BOUNDARY_FLAG;
     }
   if( this.X < 0 )
     { 
       this.X = 0;
       this.CollideFlag = COLLIDE_BOUNDARY_FLAG;
     }
   if( this.Y < 0 )
     {
       this.Y = 0;
       this.CollideFlag = COLLIDE_BOUNDARY_FLAG;
     } 
     
   if( this.CollideFlag > 0 && DemoFlag )
     {
       this.ChangeDirection(0,1);
       this.MoveCount = 0;
     }
}
//--------------------------------------------------------------------------------------- 
function SpawnBodyCell( CellList, Duration, Direction, X, Y, OwnerIndex )
{
  if( Duration < 1 )
      return;
      
  var i;
  var HeadCell = CellList[OwnerIndex];
  
  for( i = 0; i < CellList.length; i++ )
    if( CellList[i].Id == 0 )
      {
        CellList[i].Id = BODY_CELL;
        CellList[i].OwnerIndex = OwnerIndex;
        CellList[i].SetGridPosition( X, Y );
        CellList[i].Duration = Duration;
        CellList[i].Direction = Direction;
        CellList[i].PredecessorIndex = HeadCell.NewestSpawnIndex;
        HeadCell.NewestSpawnIndex = i;
        break;
      }
}
//---------------------------------------------------------------------------------------
function HandleCellLife( Cell )
{
  if( Cell.Duration > 0 )
    {
      Cell.Duration--;
      
      if( Cell.Duration <= 0 )
          Cell.Id = 0;
      else
      if( Cell.Duration == 1 )
          Cell.Id = TAIL_CELL;          
    }
} 
//---------------------------------------------------------------------------------------
function CreateSimpleCell( CellList, X, Y, Id )
{
      
  var i;
  for( i = 0; i < CellList.length; i++ )
    if( CellList[i].Id == 0 )
      {
         CellList[i].SetGridPosition( X, Y );
        
        if( Id == HARD_CELL )
          {
            CellList[i].Id = HARD_CELL;
            CellList[i].ImageIndex = 17;
            break;
          }
        else
        if( Id == FOOD_CELL )
          {
            CellList[i].Id = FOOD_CELL;
            CellList[i].ImageIndex = 18;          
            break;
          }
                
      }
}
//--------------------------------------------------------------------------------------- 
function UpdateLiveCellImages()
{
  var i, CellId, Direction, HeadCell, Dir1, Dir2;
  var ImageIndexListHead = [0,1,2,3];
  var ImageIndexListBody = [4,5,6,7];
  var ImageIndexListTail = [8,9,10,11];
  
  for( i = 0; i < LiveCellList.length; i++ )
    {
    
      CellId = LiveCellList[i].Id;
      Direction = LiveCellList[i].Direction-1;
      
      if( CellId > 0 )
        {
          if( CellId == HEAD_CELL )
            {
              LiveCellList[i].ImageIndex = ImageIndexListHead[Direction];            
            }
          else
          if( CellId == BODY_CELL )
            {
              LiveCellList[i].ImageIndex = ImageIndexListBody[Direction]; 
            }
          else
          if( CellId == TAIL_CELL )
            {
              LiveCellList[i].ImageIndex = ImageIndexListTail[Direction];             
            }
        }
    }  
 
  for( i = 0; i < LiveCellList.length; i++ )
   if( LiveCellList[i].Id == BODY_CELL )
    if( LiveCellList[i].PredecessorIndex >= 0 )
    {      
       Dir1 = LiveCellList[LiveCellList[i].PredecessorIndex].Direction;
       Dir2 = LiveCellList[i].Direction;  

           if(( Dir1 == DIR_NORTH && Dir2 == DIR_EAST ) ||
              ( Dir1 == DIR_WEST && Dir2 == DIR_SOUTH ))    
               LiveCellList[i].ImageIndex = 19;                         
           else
           if(( Dir1 == DIR_SOUTH && Dir2 == DIR_EAST ) ||
              ( Dir1 == DIR_WEST && Dir2 == DIR_NORTH ))
                LiveCellList[i].ImageIndex = 20;
           else
           if(( Dir1 == DIR_NORTH && Dir2 == DIR_WEST ) ||
              ( Dir1 == DIR_EAST && Dir2 == DIR_SOUTH ))
                LiveCellList[i].ImageIndex = 21;
           else
           if(( Dir1 == DIR_SOUTH && Dir2 == DIR_WEST ) ||
              ( Dir1 == DIR_EAST && Dir2 == DIR_NORTH ))    
                LiveCellList[i].ImageIndex = 22;        
    } 
}
//---------------------------------------------------------------------------------------
function DrawInfoBackGround( BackGroundIndexList )
{
  var x, y, i, ImageIndex;

  i = 0;
  for( y = 0; y < GRID_HEIGHT; y++ )
   for( x = 0; x < GRID_HEIGHT; x++ )   
      {
        ImageIndex = BackGroundIndexList[i];
        
        MainContext.drawImage( ThePictureList[ImageIndex], x * LIVE_CELL_WIDTH, y *LIVE_CELL_WIDTH );
        
        i++;
        
        if( i >= BackGroundIndexList.length )
            i = 0;        
      }
}
//---------------------------------------------------------------------------------------
function CheckCollideHeadFoodBody( LiveCellList_Head_Index )
{
  var GridX, GridY, GridX2, GridY2, i, CellId, CollideIndex;
  var Xdelta, Ydelta;
  
  GridX = Math.floor(LiveCellList[LiveCellList_Head_Index].X / LIVE_CELL_WIDTH);
  GridY = Math.floor(LiveCellList[LiveCellList_Head_Index].Y / LIVE_CELL_WIDTH);  
  CollideIndex = -1;
  
  LiveCellList[LiveCellList_Head_Index].CollideFlag = 0;
 
  for( i = 0; i < LiveCellList.length; i++ )
   if( LiveCellList[i].Id > 0 )
    if( i != LiveCellList_Head_Index )
      {       
        GridX2 = Math.floor(LiveCellList[i].X / LIVE_CELL_WIDTH);
        GridY2 = Math.floor(LiveCellList[i].Y / LIVE_CELL_WIDTH);
        CellId = LiveCellList[i].Id;
        
        if( GridX == GridX2 && GridY == GridY2 )
          {
            if( CellId == HARD_CELL || CellId == HEAD_CELL )
             {
               LiveCellList[LiveCellList_Head_Index].CollideFlag = COLLIDE_OBSTACLE_FLAG;
               CollideIndex = i;
               break;
             }            
            else
            if( CellId == BODY_CELL && !DemoFlag )
             {
               if( LiveCellList[LiveCellList_Head_Index].Length != LiveCellList[i].Duration )    
                 {              
                   LiveCellList[LiveCellList_Head_Index].CollideFlag = COLLIDE_OBSTACLE_FLAG;
                   CollideIndex = i;             
                 }
             }
            else
            if( CellId == TAIL_CELL && !DemoFlag )
             {
                   LiveCellList[LiveCellList_Head_Index].CollideFlag = COLLIDE_OBSTACLE_FLAG;
                   CollideIndex = i;               
             }
            else
            if( CellId == FOOD_CELL)
             {
               LiveCellList[LiveCellList_Head_Index].CollideFlag = COLLIDE_FOOD_FLAG;
               CollideIndex = i;
               break;
             }
            
          }              
      }
  
  return CollideIndex;
}
//---------------------------------------------------------------------------------------
function GameInit()
{
  var i, X, Y;
  
  for( i = 0; i < MAX_CREATURE_SEGMENTS; i++ )
     {
       LiveCellList[i] = new LiveCell();
       LiveCellList[i].Index = i;
     }
     
  for( i = 0; i < GRID_WIDTH * GRID_HEIGHT; i++ )
       BackGroundGraphicIndexList[i] = Random(12,16);
     
  X = Random(0,GRID_WIDTH-1);
  Y = Random(0,GRID_HEIGHT-1);

  LiveCellList[HEAD_CELL_INDEX].Id = HEAD_CELL;
  LiveCellList[HEAD_CELL_INDEX].SetGridPosition( X, Y );
  LiveCellList[HEAD_CELL_INDEX].ChangeDirection(DIR_SOUTH,0);
}
//--------------------------------------------------------------------------------------- 

var DEFAULT_SNAKE_LENGTH = 3;
var DEFAULT_LIVES = 5;
var FOOD_BEFORE_NEXT_LEVEL = 20;

var LivesRemain = DEFAULT_LIVES;
var PlayerScore = 0;
var Current_Level = 1;
var CurrentFoodRemain = 0;
var TotalFoodConsumed = 0;
var GameSpeed = 30;
var GameOverFlag = 0;

var MinFoodCreate = 1;
var MaxFoodCreate = 1;

//--------------------------------------------------------------------------------------- 
function HandleGameMechanics( LiveCellList_Head_Index )
{

  var CollideIndex = CheckCollideHeadFoodBody( LiveCellList_Head_Index );
  var NewLevelFlag;
  var RESTART_LEVEL_FLAG = 1, NEXT_LEVEL_FLAG = 2;
  
  if( CollideIndex >= 0 )
    {
    
          switch(LiveCellList[LiveCellList_Head_Index].CollideFlag)
            { 
              case COLLIDE_OBSTACLE_FLAG:
                 LivesRemain = LivesRemain - 1;
                 if( LivesRemain > 0 )
                     NewLevelFlag = RESTART_LEVEL_FLAG;
                     
                 Sound1.play();    
                 break;
                 
              case COLLIDE_FOOD_FLAG:
                 CurrentFoodRemain = CurrentFoodRemain - 1;
                 TotalFoodConsumed = TotalFoodConsumed + 1;
                 PlayerScore += 10;
                 
                 LiveCellList[LiveCellList_Head_Index].Length++;
                 LiveCellList[CollideIndex].Id = 0;        

                 Sound2.play();                   
                 break;
            };
            
            
          if( CurrentFoodRemain <= 0 )
            {
              if( TotalFoodConsumed % FOOD_BEFORE_NEXT_LEVEL == 0 && TotalFoodConsumed > 0 )
                  NewLevelFlag = NEXT_LEVEL_FLAG;
              else
                  RespawnFood();     
            }
    }

  if( NewLevelFlag == RESTART_LEVEL_FLAG )
    {
      StartLevel( Current_Level, LiveCellList_Head_Index );
    }
  else
  if( NewLevelFlag == NEXT_LEVEL_FLAG )
    {
      Current_Level++;
      StartLevel( Current_Level, LiveCellList_Head_Index );
    }
    
  if( LivesRemain <= 0 )
    {
      DemoFlag = 1;
      LivesRemain = DEFAULT_LIVES;      
    }
}
//---------------------------------------------------------------------------------------
function RespawnFood()
{
  var AvailCoordX = new Array();
  var AvailCoordY = new Array();
  var TempGrid = new Array(GRID_WIDTH * GRID_HEIGHT);
  var i, X, Y, k;
  
  for( i = 0; i < LiveCellList.length; i++ )
   if( LiveCellList[i].Id > 0 )
     {
       X =  Math.floor(LiveCellList[i].X / LIVE_CELL_WIDTH);
       Y =  Math.floor(LiveCellList[i].Y / LIVE_CELL_WIDTH);
       TempGrid[ Y * GRID_WIDTH + X ] = 1;
     }
  
  i = 0;   
  for( X = 0; X < GRID_WIDTH; X++ )
    for( Y = 0; Y < GRID_HEIGHT; Y++ )
      if( TempGrid[ Y * GRID_WIDTH + X ] != 1 )
        {
          AvailCoordX[i] = X;
          AvailCoordY[i] = Y;
          i++;
        }
     
  CurrentFoodRemain = Random( MinFoodCreate, MaxFoodCreate );
 
  for( i = 0; i < CurrentFoodRemain; i++ )
    {
       k = Random( 0, AvailCoordX.length - 1);
       X = AvailCoordX[k];
       Y = AvailCoordY[k];
       CreateSimpleCell( LiveCellList, X, Y, FOOD_CELL );      
    }
}
//---------------------------------------------------------------------------------------  
function StartLevel( CurrentLevel, LiveCellList_Head_Index )
{
  var HeadX, HeadY, X, Y, X0, Y0, i, k, Direction;
  
  var CoordX = [GRID_WIDTH/4, GRID_WIDTH/2, GRID_WIDTH * 0.75];
  var CoordY = [GRID_HEIGHT/4, GRID_HEIGHT/2, GRID_HEIGHT * 0.75];
 
  HeadX = Math.floor(CoordX[ Random( 0, CoordX.length-1 ) ]);
  HeadY = Math.floor(CoordY[ Random( 0, CoordY.length-1 ) ]);
  
  if( CurrentLevel < 1 )
    {
      LivesRemain = DEFAULT_LIVES;
      PlayerScore = 0;
      Current_Level = 1;
      CurrentLevel = 1;
      CurrentFoodRemain = 0;
      TotalFoodConsumed = 0;   
      LiveCellList[LiveCellList_Head_Index].Length = DEFAULT_SNAKE_LENGTH;  
    }
 
  for( i = 0; i < LiveCellList.length; i++ )
    if( i != LiveCellList_Head_Index )
        LiveCellList[i].Id = 0;
  
  LiveCellList[LiveCellList_Head_Index].Id = HEAD_CELL;  
  LiveCellList[LiveCellList_Head_Index].SetGridPosition( HeadX, HeadY );
  LiveCellList[LiveCellList_Head_Index].ChangeDirection(Random(1,4),0);
  
  if( CurrentLevel  >= 30 )
      GameSpeed = 10;
  else
  if( CurrentLevel >= 25 )
      GameSpeed = 15;
  else
  if( CurrentLevel >= 20 )
      GameSpeed = 20;
  else
  if( CurrentLevel >= 10 )
      GameSpeed = 25;
  else
  if( CurrentLevel >= 5 )
      GameSpeed = 30;
  else
      GameSpeed = 30;

  var ObstacleCount = 0;

  for( i = 9; i >= 3; i-- )
    if( CurrentLevel % i == 0 )
      {
        ObstacleCount = i;
        break;
      }

  var ObstacleMinLength = 2;
  var ObstacleMaxLength = 10;
  var ObstacleLength;
  
  for( i = 0; i < ObstacleCount; i++ )
     { 
       X = Random( 1, GRID_WIDTH - 2);
       Y = Random( 1, GRID_HEIGHT - 2);
       Direction = Random(1,4);
       
       X0 = Y0 = 0;
       
       switch(Direction)
        {
          case DIR_NORTH:
            X0 = 0; Y0 = -1;
            break;
          case DIR_EAST:
            X0 = 1; Y0 = 0;
            break;
          case DIR_SOUTH:
            X0 = 0; Y0 = 1;
            break;
          case DIR_WEST:
            X0 = -1; Y0 = 0;
            break;
          default:
            break;
        };
        
        ObstacleLength = Random(ObstacleMinLength,ObstacleMaxLength);
        
        for( k = 0; k < ObstacleLength; k++ )
          {
            X += X0; Y += Y0;
            
            if( X != HeadX && Y != HeadY && X >= 1 && Y >= 1 &&
                X < GRID_WIDTH - 1 && Y < GRID_HEIGHT - 1 )
              {
                CreateSimpleCell( LiveCellList, X, Y, HARD_CELL );  
              }
            else
              continue;
          }
       
     }

  MinFoodCreate = Math.ceil( CurrentLevel/4 );
  MaxFoodCreate = Math.ceil( CurrentLevel/3 );
  
  CurrentFoodRemain = Random( MinFoodCreate, MaxFoodCreate );
 
  RespawnFood();
}
//---------------------------------------------------------------------------------------  
function GameLoop()
{
 var CellId, OwnerIndex, thestr, i;
 
 if( ImagesLoadedFlag )
  {
    MainContext.save();  
    //MainContext.fillStyle = "rgb(100,100,230)";
    //MainContext.fillRect( 0, 0, MainCanvas.width, MainCanvas.height);
    DrawInfoBackGround( BackGroundGraphicIndexList );
    
      for( i = MAX_CREATURE_SEGMENTS - 1; i >= 0; i-- )
       {
       CellId = LiveCellList[i].Id;
       OwnerIndex = LiveCellList[i].OwnerIndex;
       
       if( CellId > 0 )
         {
                                                     
           if( CellId == HEAD_CELL )
             {               
               LiveCellList[i].Move();        

               if( LiveCellList[i].BorderCrossedFlag > 0 )   
                 {
                   LiveCellList[i].CheckOutside(); 
                   HandleGameMechanics(i);    

                    if( TurnDemoOff_Flag > 0 && DemoFlag == 1 )
                      {
                        Current_Level = 0;
                        StartLevel( Current_Level, HEAD_CELL_INDEX );
                        TurnDemoOff_Flag = 0;
                        DemoFlag = 0;
                        TotalFoodConsumed = 0;                        
                      }                   
                 }
             }                 
           else
           if( CellId == BODY_CELL || CellId == TAIL_CELL)
             {
               if( OwnerIndex >= 0) 
                if( LiveCellList[OwnerIndex].BorderCrossedFlag > 0 )
                    HandleCellLife(LiveCellList[i]);
             }                    
               
           LiveCellList[i].Draw(); 
         }
       }
    
    thestr = "LIVES "+LivesRemain+" LEVEL "+Current_Level+" FOOD "+TotalFoodConsumed;
    if( DemoFlag >= 1 )
        thestr += " GAME OVER";
    
    MainContext.font = "bold 12pt Arial";
    MainContext.fillStyle = "rgb(50,240,50)"; 
    MainContext.fillText(thestr,15,30);
    
    if( DemoFlag >= 1 )
      {
        MainContext.font = "bold 35pt Arial";
        MainContext.fillStyle = "rgb(10,10,10)";
        MainContext.fillText("Sneaky Snake",12,197); 
        MainContext.font = "bold 20pt Arial";  
        MainContext.fillText("by YXY Software",13,238);
       
        MainContext.font = "bold 35pt Arial";
        MainContext.fillStyle = "rgb(50,50,255)";  
        MainContext.fillText("Sneaky Snake",15,200);                  
        MainContext.font = "bold 20pt Arial";     
        MainContext.fillText("by YXY Software",15,240);         
      }
                 
    MainContext.restore();
     
  }
 UpdateLiveCellImages();   
 setTimeout("GameLoop()", GameSpeed); 
}
//--------------------------------------------------------------------------------------- 

DemoFlag = 1;
GameInit();

MinFoodCreate = 5;
MaxFoodCreate = 15;
StartLevel( 20, 0 );
//LiveCellList[HEAD_CELL_INDEX].Length = 8;

GameLoop();

</script>
</body>
<html>
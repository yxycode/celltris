Attribute VB_Name = "Module1"
Option Explicit

Public Declare Sub Bitmap_Init Lib "bitmap.dll" Alias "Bitmap_Init@12" (ByVal hwnd As Long, ByVal nBufferWidth As Long, ByVal nBufferHeight As Long)
Public Declare Sub Bitmap_LoadBitMapFile Lib "bitmap.dll" Alias "Bitmap_LoadBitMapFile@16" (ByVal Index As Long, ByVal FileName As String, ByVal nWidth As Long, ByVal nHeight As Long)
Public Declare Sub Bitmap_LoadBitMapFileScaled Lib "bitmap.dll" Alias "Bitmap_LoadBitMapFileScaled@24" (ByVal Index As Long, ByVal FileName As String, ByVal nWidth As Long, ByVal nHeight As Long, ByVal fScaleX As Single, ByVal fScaleY As Single)
Public Declare Sub Bitmap_InitFont Lib "bitmap.dll" Alias "Bitmap_InitFont@8" (ByVal nHeight As Long, ByVal FontFace As String)
Public Declare Sub Bitmap_SetTextForeColor Lib "bitmap.dll" Alias "Bitmap_SetTextForeColor@12" (ByVal r As Long, ByVal g As Long, ByVal b As Long)
Public Declare Sub Bitmap_SetTextBackColor Lib "bitmap.dll" Alias "Bitmap_SetTextBackColor@12" (ByVal r As Long, ByVal g As Long, ByVal b As Long)
Public Declare Sub Bitmap_DrawCell Lib "bitmap.dll" Alias "Bitmap_DrawCell@12" (ByVal PicIndex As Long, ByVal X As Long, ByVal Y As Long)
Public Declare Sub Bitmap_DrawText Lib "bitmap.dll" Alias "Bitmap_DrawText@12" (ByVal Text As String, ByVal X As Long, ByVal Y As Long)
'Public Declare Sub Bitmap_DrawTextList Lib "bitmap.dll" Alias "Bitmap_DrawTextList@16" (TextList() As String, XList() As Long, YList() As Long, ByVal Count As Long)
Public Declare Sub Bitmap_Buffer2Window Lib "bitmap.dll" Alias "Bitmap_Buffer2Window@4" (ByVal DestDC As Long)
Public Declare Sub Bitmap_ClearBuffer Lib "bitmap.dll" Alias "Bitmap_ClearBuffer@0" ()
Public Declare Sub Bitmap_SetOption Lib "bitmap.dll" Alias "Bitmap_SetOption@4" (ByVal OptionStr As String)

Public Declare Function AzSoundInit Lib "asound.dll" Alias "_AzSoundInit@4" (ByVal hwnd As Long) As Long
Public Declare Function AzSoundInitX Lib "asound.dll" Alias "_AzSoundInitX@16" (ByVal hwnd, MonoStereo As Long, ByVal Frequency As Long, ByVal Bits As Long) As Long
Public Declare Function AzAddSound Lib "asound.dll" Alias "_AzAddSound@8" (ByVal FileName As String, ByVal Index As Long) As Long
Public Declare Function AzPlaySound Lib "asound.dll" Alias "_AzPlaySound@4" (ByVal Index As Long) As Long
Public Declare Function AzPlaySoundLooping Lib "asound.dll" Alias "_AzPlaySoundLooping@4" (ByVal Index As Long) As Long
Public Declare Function AzIsSoundPlaying Lib "asound.dll" Alias "_AzIsSoundPlaying@4" (ByVal Index As Long) As Long
Public Declare Sub AzStopSound Lib "asound.dll" Alias "_AzStopSound@4" (ByVal Index As Long)
Public Declare Sub AzClose Lib "asound.dll" Alias "_AzClose@0" ()

Public Const SM_CXSCREEN = 0
Public Const SM_CYSCREEN = 1
Public Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
'########################################################################################################

Public Const MAX_SHAPE_WIDTH As Integer = 5
Public Const MAX_SHAPE_HEIGHT As Integer = 5
Public Const MAX_SHAPE_TYPES As Integer = 7

' original pit dimensions 6x18

' custom pit dimensions 9x20
' PLAYFIELD_WIDTH = 53, PLAYFIELD_HEIGHT = 20

Public Const PLAYFIELD_WIDTH As Integer = 35
Public Const PLAYFIELD_HEIGHT As Integer = 17

Public Type Shape
  Id As Integer
  X As Integer
  Y As Integer
  Cell(0 To MAX_SHAPE_WIDTH - 1, 0 To MAX_SHAPE_HEIGHT - 1) As Integer
End Type

Public ShapeList(0 To MAX_SHAPE_TYPES - 1) As Shape

Public CurrentShape As Shape

Public StaticPlayField(0 To PLAYFIELD_WIDTH - 1, 0 To PLAYFIELD_HEIGHT - 1) As Integer
Public OutputPlayField(0 To PLAYFIELD_WIDTH - 1, 0 To PLAYFIELD_HEIGHT - 1) As Integer
Public DeletePlayField(0 To PLAYFIELD_WIDTH - 1, 0 To PLAYFIELD_HEIGHT - 1) As Integer

' * * * for custom pit dimensions * * *
Public Const LEFT_WALL_X As Integer = PLAYFIELD_WIDTH / 2 - 6
Public Const RIGHT_WALL_X As Integer = LEFT_WALL_X + 7
Public Const WALL_CELL_VALUE As Integer = 8

' * * * for custom pit dimensions * * *
Public Const SHAPE_START_X As Integer = PLAYFIELD_WIDTH / 2 - MAX_SHAPE_WIDTH / 2 - 1

Dim FallSpeedCounter As Integer
Dim FallSpeedCounterMax As Integer
Dim FallSpeedIncrement As Integer

Public MoveLeftFlag As Integer
Public MoveRightFlag As Integer
Public DropFlag As Integer
Public RotateRightFlag As Integer
Public RotateLeftFlag As Integer
Public KeyPressFlag As Integer

Public Option_Flag_List(0 To 9) As Integer
Public Option_Running_Flag As Integer
Public Option_Paused_Flag As Integer
Public Difficulty_Change_Flag As Integer

Public StartRandomShapeFlag As Integer
Public InstantDropFlag As Integer

Public CurrentGameState As Integer
Public Const GAME_STATE_BEGIN As Integer = 0
Public Const GAME_STATE_GAME_OVER As Integer = 1
Public Const GAME_STATE_RUNNING As Integer = 2
Public Const GAME_STATE_PAUSED As Integer = 3

Public TimeDelayCounter As Integer
Public Const TIME_DELAY_COUNTER_MAX As Integer = 20

Public Const HIT_BOTTOM_POINTS As Integer = 2
Public Const CLEAR_LINE_POINTS As Integer = 10
Public Const LINE_COUNT_BONUS_POINTS As Integer = 5
Public Const SHAPE_BONUS_POINTS As Integer = 100

Public HighScore As Long
Public CurrentScore As Long
Public CurrentSpeed As Long
Public CurrentShapesClearedCount As Long
Public CurrentPiece As Shape
Public NextPiece As Shape
Public HundredShapesClearedLimitCount As Long

Public DifficultyLevel As Integer
Public Const EASY_LEVEL As Integer = -1
Public Const NORMAL_LEVEL As Integer = 0
Public Const HARD_LEVEL As Integer = 1

Dim MoveLeftCounter As Integer, MoveLeftCounterMax As Integer
Dim MoveRightCounter As Integer, MoveRightCounterMax As Integer
Dim RotateRightCounter As Integer, RotateRightCounterMax As Integer
Dim RotateLeftCounter As Integer, RotateLeftCounterMax As Integer
Dim DropCounter As Integer, DropCounterMax As Integer

Dim GeneralKeyDelayCounter As Integer
Dim GeneralKeyDelayCounterMax As Integer

Public PausePlayAnimationStateFlag As Integer
Public RefreshDelayCounter As Integer
Public RefreshDelayCounterMax As Integer
Public CellClearChainCount As Integer

Const MAX_PICTURES As Integer = 100
Public TiledBackGroundFlag As Integer
Public ShowBackGroundFlag As Integer
Public BackGroundPictureIndex As Integer

Public PicWidthList(0 To MAX_PICTURES) As Integer
Public PicHeightList(0 To MAX_PICTURES) As Integer
    
Public GameResolutionX As Integer
Public GameResolutionY As Integer

Public CellWidthPixels As Integer
Public CellHeightPixels As Integer

Public CellTextWidthPixels As Integer
Public CellTextHeightPixels As Integer
'########################################################################################################


Public Sub InitializeShapeShapes()
    
    '** test **
    Exit Sub
    
Dim X%, Y%, T%
Dim Str(0 To MAX_SHAPE_TYPES - 1, 0 To MAX_SHAPE_HEIGHT - 1) As String
Dim MaxCellColorTypes%

Str(0, 0) = "....."
Str(0, 1) = "..#.."
Str(0, 2) = "..#.."
Str(0, 3) = "..#.."
Str(0, 4) = "....."


For Y = 1 To 6
 For X = 0 To 4
    Str(Y, X) = Str(0, X)
 Next X
Next Y

         Select Case DifficultyLevel
          Case EASY_LEVEL:
             MaxCellColorTypes = 4
          Case NORMAL_LEVEL:
             MaxCellColorTypes = 5
          Case HARD_LEVEL:
             MaxCellColorTypes = 7
          Case Else
        End Select
        
For T = 0 To MAX_SHAPE_TYPES - 1
 
 ShapeList(T).Id = T + 1
 ShapeList(T).X = 0
 ShapeList(T).Y = 0
 
 For Y = 0 To MAX_SHAPE_HEIGHT - 1
   For X = 0 To MAX_SHAPE_WIDTH - 1
     If Mid(Str(T, Y), X + 1, 1) = "#" Then
        ShapeList(T).Cell(X, Y) = T + 1
        ShapeList(T).Cell(X, Y) = Rand(1, MaxCellColorTypes)
     Else
        ShapeList(T).Cell(X, Y) = 0
     End If
     
   Next X
 Next Y
Next T

End Sub

Sub RotateShapeLeft(TheShape As Shape)

Dim TheShape2 As Shape
Dim C%

TheShape2 = TheShape
   
   ' *** shift up ***
   C = TheShape.Cell(2, 1)
   TheShape2.Cell(2, 1) = TheShape.Cell(2, 2)
   TheShape2.Cell(2, 2) = TheShape.Cell(2, 3)
   TheShape2.Cell(2, 3) = TheShape.Cell(2, 1)
   
TheShape = TheShape2
   
End Sub

Sub RotateShapeRight(TheShape As Shape)

Dim TheShape2 As Shape
Dim C%

TheShape2 = TheShape

   ' *** shift down ***
   C = TheShape.Cell(2, 1)
   TheShape2.Cell(2, 1) = TheShape.Cell(2, 3)
   TheShape2.Cell(2, 2) = TheShape.Cell(2, 1)
   TheShape2.Cell(2, 3) = TheShape.Cell(2, 2)

TheShape = TheShape2
   
End Sub
Sub LoadMedia()

    Dim ScaleX!, ScaleY!, FileName$, PicWidth!, PicHeight!, Index%, BackGroundFlag%
        
    Bitmap_SetOption "initialize"
    
    Open "pillars.ini" For Input As #1
    
    While Not EOF(1)
      Input #1, Index, FileName, PicWidth, PicHeight, BackGroundFlag
      
      If InStr(1, FileName, ".bmp") > 0 Then
        
         PicWidthList(Index) = PicWidth
         PicHeightList(Index) = PicHeight
         ScaleX = CellWidthPixels / PicWidth + 0.01
         ScaleY = CellHeightPixels / PicHeight + 0.01
         
         If BackGroundFlag = 1 And TiledBackGroundFlag = 1 Then
            Bitmap_SetOption "1,1,0,"
            Bitmap_LoadBitMapFile Index, FileName, PicWidth, PicHeight
         ElseIf BackGroundFlag = 1 And TiledBackGroundFlag = 0 Then
            Bitmap_SetOption "1,1,0,"
            ScaleX = GameResolutionX / PicWidth
            ScaleY = GameResolutionY / PicHeight
            Bitmap_LoadBitMapFileScaled Index, FileName, PicWidth, PicHeight, ScaleX, ScaleY
         Else
            Bitmap_SetOption "1,1,1,"
            Bitmap_LoadBitMapFileScaled Index, FileName, PicWidth, PicHeight, ScaleX, ScaleY
         End If
         
      ElseIf InStr(1, FileName, ".wav") > 0 Then
         AzAddSound FileName, Index
      End If
    Wend
    
    Close #1
    
End Sub
Function DoHighScore(WhatDo As Integer) As Long

  If WhatDo = 1 Then
    Open "score.dat" For Input As #1
    Input #1, DoHighScore
    Close #1
  ElseIf WhatDo = 2 Then
    Open "score.dat" For Output As #1
    Print #1, HighScore
    Close #1
  End If
  
End Function
Sub InitGame(hwnd As Long)

    Randomize Timer / 3
     
    ShowBackGroundFlag = 1
    TiledBackGroundFlag = 1
    BackGroundPictureIndex = Rand(9, 14)
    
    GameResolutionX = GetSystemMetrics(SM_CXSCREEN)
    GameResolutionY = GetSystemMetrics(SM_CYSCREEN)
    
    CellTextHeightPixels = GameResolutionY / PLAYFIELD_HEIGHT
    CellTextWidthPixels = CellTextHeightPixels * (12! / 20!)
    CellWidthPixels = GameResolutionX / PLAYFIELD_WIDTH
    CellHeightPixels = GameResolutionY / PLAYFIELD_HEIGHT
    
    Bitmap_Init hwnd, GameResolutionX, GameResolutionY
    Bitmap_InitFont CellTextHeightPixels * 1.2 * 0.6, "Courier"
    
    AzSoundInit hwnd
    LoadMedia
    
    HighScore = DoHighScore(1)
    ' * * * * * * * * * * * * * * * * * * * * * * * * * *
        
    CurrentSpeed = 5
    
    FallSpeedCounterMax = 100
    FallSpeedIncrement = CurrentSpeed
    FallSpeedCounter = 0
    
    MoveLeftCounterMax = 1
    MoveRightCounterMax = 1
    RotateRightCounterMax = 1
    RotateLeftCounterMax = 1
    DropCounterMax = 1
    
    GeneralKeyDelayCounterMax = 1
    
    StartRandomShapeFlag = 0
    
    HundredShapesClearedLimitCount = 0
    CurrentGameState = GAME_STATE_BEGIN
    StartRandomShape
    
    PausePlayAnimationStateFlag = 0
    RefreshDelayCounter = 0
    RefreshDelayCounterMax = 30
    
    DifficultyLevel = NORMAL_LEVEL
    
End Sub

Sub DrawShape2OutputPlayField(TheShape As Shape)
   
  Dim X%, Y%, X2%, Y2%
  
  For Y = 0 To MAX_SHAPE_HEIGHT - 1
    For X = 0 To MAX_SHAPE_WIDTH - 1
        
        X2 = TheShape.X + X
        Y2 = TheShape.Y + Y
        
        If TheShape.Cell(X, Y) > 0 And 0 <= X2 And X2 < PLAYFIELD_WIDTH And _
           0 <= Y2 And Y2 < PLAYFIELD_HEIGHT Then
           OutputPlayField(X2, Y2) = TheShape.Cell(X, Y)
           
        End If
        
    Next X
  Next Y
  
End Sub
Sub DrawBackGround()

 Dim Index%, PicWidth%, PicHeight%, TileXCount%, TileYCount%, X%, Y%
    
 Index = BackGroundPictureIndex
 
 PicWidth = PicWidthList(Index)
 PicHeight = PicHeightList(Index)
         
 TileXCount = GameResolutionX / PicWidth + 1
 TileYCount = GameResolutionY / PicHeight + 1
 
 If TiledBackGroundFlag > 0 Then
   For Y = 0 To TileYCount - 1
    For X = 0 To TileXCount - 1
      Bitmap_DrawCell Index, X * PicWidth, Y * PicHeight
    Next X
   Next Y
 Else
     Bitmap_DrawCell Index, 0, 0
 End If
 
End Sub
Sub DrawOutputPlayField2BufferText()

  Dim X%, Y%, Cell%, X2%, Y2%
  
  If ShowBackGroundFlag = 1 Then
    DrawBackGround
  End If
  
  For Y = 0 To PLAYFIELD_HEIGHT - 1
    For X = 0 To PLAYFIELD_WIDTH - 1
        
        Cell = OutputPlayField(X, Y)
        X2 = X * CellWidthPixels
        Y2 = Y * CellHeightPixels
        
        Select Case Cell
           Case 0:
             'Bitmap_SetTextBackColor 0, 50, 50
             'Bitmap_SetTextBackColor 0, 0, 0
           Case 1:
             'Bitmap_SetTextBackColor 255, 0, 0
           Case 2:
             'Bitmap_SetTextBackColor 0, 255, 0
           Case 3:
             'Bitmap_SetTextBackColor 0, 0, 255
           Case 4:
             'Bitmap_SetTextBackColor 255, 255, 0
           Case 5:
             'Bitmap_SetTextBackColor 255, 0, 255
           Case 6:
             'Bitmap_SetTextBackColor 0, 255, 255
           Case 7:
             'Bitmap_SetTextBackColor 128, 128, 128
           Case 8:
             'Bitmap_SetTextBackColor 50, 50, 50   ' *** wall ***
         End Select
         
         If DeletePlayField(X, Y) > 0 Then
            'Bitmap_SetTextForeColor 255, 255, 0
            'Bitmap_DrawText "*", X2, Y2
            Bitmap_DrawCell 8, X2, Y2
         Else
            'Bitmap_DrawText " ", X2, Y2
            If ShowBackGroundFlag = 1 And Cell = 0 Then
            Else
              Bitmap_DrawCell Cell, X2, Y2
            End If
         End If
    Next X
  Next Y
  
End Sub

Sub ClearStaticPlayField()

Dim X%, Y%

    For Y = 0 To PLAYFIELD_HEIGHT - 1
     For X = 0 To PLAYFIELD_WIDTH - 1
       StaticPlayField(X, Y) = 0
     Next X
    Next Y

End Sub

Sub ClearOutputPlayField()

Dim X%, Y%

    For Y = 0 To PLAYFIELD_HEIGHT - 1
     For X = 0 To PLAYFIELD_WIDTH - 1
       OutputPlayField(X, Y) = 0
     Next X
    Next Y

End Sub

Sub ClearDeletePlayField()

Dim X%, Y%

    For Y = 0 To PLAYFIELD_HEIGHT - 1
     For X = 0 To PLAYFIELD_WIDTH - 1
       DeletePlayField(X, Y) = 0
     Next X
    Next Y

End Sub
Function DropShape()
    
    DropShape = 0
    
    FallSpeedCounter = FallSpeedCounter + FallSpeedIncrement + 1
    
    If FallSpeedCounter > FallSpeedCounterMax Then
       FallSpeedCounter = 0
       CurrentShape.Y = CurrentShape.Y + 1
       DropShape = 1
    End If
    
End Function

Function Rand(LowerBound%, UpperBound%)
   
   Rand = Int((UpperBound - LowerBound + 1) * Rnd()) + LowerBound
   
End Function
Function CreateRandomPillar() As Shape

Dim ThePillar As Shape

Dim X%, Y%, T%
Dim Str(0 To MAX_SHAPE_HEIGHT - 1) As String
Dim MaxCellColorTypes As Integer
        
Str(0) = "....."
Str(1) = "..#.."
Str(2) = "..#.."
Str(3) = "..#.."
Str(4) = "....."
        
 
 ThePillar.Id = 1
 ThePillar.X = 0
 ThePillar.Y = 0
 
         Select Case DifficultyLevel
          Case EASY_LEVEL:
             MaxCellColorTypes = 4
          Case NORMAL_LEVEL:
             MaxCellColorTypes = 5
          Case HARD_LEVEL:
             MaxCellColorTypes = 7
          Case Else
             
         End Select

 For Y = 0 To MAX_SHAPE_HEIGHT - 1
   For X = 0 To MAX_SHAPE_WIDTH - 1
     If Mid(Str(Y), X + 1, 1) = "#" Then
        ThePillar.Cell(X, Y) = Rand(1, MaxCellColorTypes)
     Else
        ThePillar.Cell(X, Y) = 0
     End If
     
   Next X
 Next Y

 CreateRandomPillar = ThePillar
 
End Function

Sub StartRandomShape()
    
    If CurrentPiece.Id = 0 And NextPiece.Id = 0 Then
       CurrentPiece = CreateRandomPillar()
       NextPiece = CreateRandomPillar()
    Else
       CurrentPiece = NextPiece
       NextPiece = CreateRandomPillar()
    End If
    
    CurrentShape = CurrentPiece
    CurrentShape.X = SHAPE_START_X
    CurrentShape.Y = -2
    
End Sub

Sub DrawWallsStaticPlayField()
 
  Dim X%, Y%
  
  For Y = 0 To PLAYFIELD_HEIGHT - 1
    
     StaticPlayField(LEFT_WALL_X, Y) = WALL_CELL_VALUE
     StaticPlayField(RIGHT_WALL_X, Y) = WALL_CELL_VALUE
     
  Next Y
  
  For X = LEFT_WALL_X To RIGHT_WALL_X
     StaticPlayField(X, PLAYFIELD_HEIGHT - 1) = WALL_CELL_VALUE
  Next X
  
End Sub

Sub CopyStaticPlayField2OutputPlayField()

Dim X%, Y%

    For Y = 0 To PLAYFIELD_HEIGHT - 1
     For X = 0 To PLAYFIELD_WIDTH - 1
       OutputPlayField(X, Y) = StaticPlayField(X, Y)
     Next X
    Next Y
    
    
End Sub

Function CheckShapeCollideStaticPlayField()

  Dim X%, Y%, X2%, Y2%
  
  CheckShapeCollideStaticPlayField = 0
  
  For Y = 0 To MAX_SHAPE_HEIGHT - 1
    For X = 0 To MAX_SHAPE_WIDTH - 1
        
        X2 = CurrentShape.X + X
        Y2 = CurrentShape.Y + Y
        
        If CurrentShape.Cell(X, Y) > 0 And 0 <= X2 And X2 < PLAYFIELD_WIDTH And _
           0 <= Y2 And Y2 < PLAYFIELD_HEIGHT Then
         If StaticPlayField(X2, Y2) > 0 Then
           CheckShapeCollideStaticPlayField = 1
           Exit For
         End If
        End If
        
    Next X
    
    If CheckShapeCollideStaticPlayField Then
       Exit For
    End If
    
  Next Y

End Function

Sub PasteShape2StaticPlayField()

  Dim X%, Y%, X2%, Y2%
  
  For Y = 0 To MAX_SHAPE_HEIGHT - 1
    For X = 0 To MAX_SHAPE_WIDTH - 1
        
        X2 = CurrentShape.X + X
        Y2 = CurrentShape.Y + Y
        
        If CurrentShape.Cell(X, Y) > 0 And 0 <= X2 And X2 < PLAYFIELD_WIDTH And _
           0 <= Y2 And Y2 < PLAYFIELD_HEIGHT Then
           StaticPlayField(X2, Y2) = CurrentShape.Cell(X, Y)
        End If
        
    Next X


  Next Y
End Sub

Sub InstantDrop()

Dim i As Integer
Dim XOld As Integer, YOld As Integer
Dim X As Integer, Y As Integer

For Y = PLAYFIELD_HEIGHT - 1 To 0 Step -1

     XOld = CurrentShape.X
     YOld = CurrentShape.Y

     CurrentShape.Y = CurrentShape.Y + 1
  
  If CheckShapeCollideStaticPlayField() Then
   
     CurrentShape.X = XOld
     CurrentShape.Y = YOld

     PasteShape2StaticPlayField
     StartRandomShapeFlag = 1
     
     Exit For
  End If
Next Y

End Sub
Sub UserInteraction()

 Dim ShapeBackUp As Shape
 
If CurrentGameState = GAME_STATE_RUNNING Then

 ShapeBackUp = CurrentShape

 If MoveLeftFlag Then
    MoveLeftCounter = MoveLeftCounter + 1
    
    If MoveLeftCounter >= MoveLeftCounterMax Then
       CurrentShape.X = CurrentShape.X - 1
       MoveLeftCounter = 0
    End If
 Else
    MoveLeftCounter = 0
 End If
 
  If MoveRightFlag Then
    MoveRightCounter = MoveRightCounter + 1
    
    If MoveRightCounter >= MoveRightCounterMax Then
       CurrentShape.X = CurrentShape.X + 1
       MoveRightCounter = 0
    End If
 Else
    MoveRightCounter = 0
 End If

  If RotateRightFlag Then
    RotateRightCounter = RotateRightCounter + 1
    
    If RotateRightCounter >= RotateRightCounterMax Then
       RotateShapeRight CurrentShape
       RotateRightCounter = 0
       AzPlaySound 2
    End If
 Else
    RotateRightCounter = 0
 End If
 
   If RotateLeftFlag Then
    RotateLeftCounter = RotateLeftCounter + 1
    
    If RotateLeftCounter >= RotateLeftCounterMax Then
       RotateShapeLeft CurrentShape
       RotateRightCounter = 0
       AzPlaySound 2
    End If
 Else
    RotateRightCounter = 0
 End If
 
 If DropFlag Then
    DropCounter = DropCounter + 1
    
    If DropCounter >= DropCounterMax Then
       InstantDropFlag = 1
       DropCounter = 0
       AzPlaySound 0
    End If
 Else
    DropCounterMax = 0
 End If
  
 If CheckShapeCollideStaticPlayField() Then
    CurrentShape = ShapeBackUp
 End If
 
End If

End Sub

Function CheckTripleEqual(Comparer%, Compared1%, Compared2%, Compared3%)

   If Compared1 = Comparer And Compared2 = Comparer And Compared3 = Comparer Then
      CheckTripleEqual = 1
   Else
      CheckTripleEqual = 0
   End If
   
End Function

Function CheckFormLines()

Dim ClearArea(0 To 4, 0 To 4) As Integer
Dim DestroyArea(0 To 4, 0 To 4) As Integer
Dim Comparer As Integer
Dim CellCount(0 To 7) As Integer
Dim X%, Y%, X2%, Y2%, X3%, Y3%, ComboCount%, i%
    
    ComboCount = 0

    For Y = PLAYFIELD_HEIGHT - 2 To 1 Step -1
      For X = LEFT_WALL_X + 1 To RIGHT_WALL_X - 1
         
         If StaticPlayField(X, Y) > 0 Then
             
            For Y3 = 0 To 4
              For X3 = 0 To 4
                ClearArea(X3, Y3) = 0
                DestroyArea(X3, Y3) = 0
              Next X3
            Next Y3
             
            X3 = 0
               
            For X2 = X - 2 To X + 2
               Y3 = 0
             For Y2 = Y - 2 To Y + 2
                
                If 0 <= X2 And X2 <= PLAYFIELD_WIDTH - 1 And 0 <= Y2 And Y2 <= PLAYFIELD_HEIGHT - 1 Then
                  If StaticPlayField(X2, Y2) <> WALL_CELL_VALUE And StaticPlayField(X2, Y2) > 0 Then
                    ClearArea(X3, Y3) = StaticPlayField(X2, Y2)
                  Else
                    ClearArea(X3, Y3) = 0
                  End If
                End If
                
                Y3 = Y3 + 1
             Next Y2
             X3 = X3 + 1
            Next X2
            
    '# # # # #
    '# # # # #
    '# # . # #
    '# # # # #
    '# # # # #
    
    
    Comparer = ClearArea(2, 2)
    
    If Comparer > 0 Then
    
    ' topleft
    CellCount(0) = CheckTripleEqual(Comparer, ClearArea(0, 0), ClearArea(1, 1), ClearArea(2, 2))
    
    If CellCount(0) Then
      DestroyArea(0, 0) = 1
      DestroyArea(1, 1) = 1
      DestroyArea(2, 2) = 1
    End If
    
    ' top
    CellCount(1) = CheckTripleEqual(Comparer, ClearArea(2, 0), ClearArea(2, 1), ClearArea(2, 2))
    
    If CellCount(1) Then
      DestroyArea(2, 0) = 1
      DestroyArea(2, 1) = 1
      DestroyArea(2, 2) = 1
    End If
    
    ' topright
    CellCount(2) = CheckTripleEqual(Comparer, ClearArea(4, 0), ClearArea(3, 1), ClearArea(2, 2))
    
    If CellCount(2) Then
      DestroyArea(4, 0) = 1
      DestroyArea(3, 1) = 1
      DestroyArea(2, 2) = 1
    End If
    
    ' right
    CellCount(3) = CheckTripleEqual(Comparer, ClearArea(2, 2), ClearArea(3, 2), ClearArea(4, 2))
    
    If CellCount(3) Then
      DestroyArea(2, 2) = 1
      DestroyArea(3, 2) = 1
      DestroyArea(4, 2) = 1
    End If
        
    ' downright
    CellCount(4) = CheckTripleEqual(Comparer, ClearArea(2, 2), ClearArea(3, 3), ClearArea(4, 4))
    
    If CellCount(4) Then
      DestroyArea(2, 2) = 1
      DestroyArea(3, 3) = 1
      DestroyArea(4, 4) = 1
    End If
        
        
    ' down
    CellCount(5) = CheckTripleEqual(Comparer, ClearArea(2, 2), ClearArea(2, 3), ClearArea(2, 4))
    
    If CellCount(5) Then
      DestroyArea(2, 2) = 1
      DestroyArea(2, 3) = 1
      DestroyArea(2, 4) = 1
    End If
        
    ' downleft
    CellCount(6) = CheckTripleEqual(Comparer, ClearArea(2, 2), ClearArea(1, 3), ClearArea(0, 4))
    
    If CellCount(6) Then
      DestroyArea(2, 2) = 1
      DestroyArea(1, 3) = 1
      DestroyArea(0, 4) = 1
    End If
        
    ' left
    CellCount(7) = CheckTripleEqual(Comparer, ClearArea(2, 2), ClearArea(1, 2), ClearArea(0, 2))
    
    If CellCount(7) Then
      DestroyArea(2, 2) = 1
      DestroyArea(1, 2) = 1
      DestroyArea(0, 2) = 1
    End If
        
            X3 = 0
            For X2 = X - 2 To X + 2
               Y3 = 0
             For Y2 = Y - 2 To Y + 2
                 
                 If DestroyArea(X3, Y3) Then
                   DeletePlayField(X2, Y2) = 1
                 End If
                 
               Y3 = Y3 + 1
             Next Y2
               X3 = X3 + 1
            Next X2
   
         End If
                 
         
         For i = 0 To 7
           If CellCount(i) Then
             ComboCount = ComboCount + 1
           End If
         Next i
    
         
         'If ComboCount > 0 Then
         '  ExitFlag = 1
         '  PausePlayAnimationStateFlag = 1
         '  Exit For
         'End If
      
      End If
      
      Next X
      
      'If ExitFlag Then Exit For
    Next Y
    
    
    For Y = 0 To PLAYFIELD_HEIGHT - 1
     For X = 0 To PLAYFIELD_WIDTH - 1
        If DeletePlayField(X, Y) Then
           StaticPlayField(X, Y) = 0
        End If
     Next X
    Next Y
    
          If ComboCount > 0 Then
            PausePlayAnimationStateFlag = 1
          End If
    
    CheckFormLines = ComboCount
    
End Function

Public Function TimeDelay()

  TimeDelay = 0
  
  TimeDelayCounter = TimeDelayCounter + 1
  
  If TimeDelayCounter >= TIME_DELAY_COUNTER_MAX Then
     TimeDelayCounter = 0
     TimeDelay = 1
  End If
  
End Function

Public Sub DisplayGameInfo()

 Bitmap_SetTextForeColor 100, 100, 100
 Bitmap_SetTextBackColor 0, 0, 0
 
 Dim W%, H%
 
 W = CellTextWidthPixels
 H = CellTextHeightPixels
 
 Dim Dstr$
 
         Select Case DifficultyLevel
          Case EASY_LEVEL:
             Dstr = " E"
          Case NORMAL_LEVEL:
             Dstr = " "
          Case HARD_LEVEL:
             Dstr = " H"
         End Select
 
 
 Bitmap_DrawText "High Score", RIGHT_WALL_X * W + 9 * W, H * 2
 Bitmap_DrawText HighScore, RIGHT_WALL_X * W + 9 * W, H * 3
 
 Bitmap_DrawText "Current Score", RIGHT_WALL_X * W + 9 * W, H * 4
 Bitmap_DrawText CurrentScore, RIGHT_WALL_X * W + 9 * W, H * 5
 
 Bitmap_DrawText "Current Speed", RIGHT_WALL_X * W + 9 * W, H * 6
 Bitmap_DrawText Trim(Str(CurrentSpeed)) + Dstr, RIGHT_WALL_X * W + 9 * W, H * 7
 
 Bitmap_DrawText "Cleared", RIGHT_WALL_X * W + 9 * W, H * 8
 Bitmap_DrawText CurrentShapesClearedCount, RIGHT_WALL_X * W + 9 * W, H * 9
 
 Bitmap_DrawText "Next", RIGHT_WALL_X * W + 9 * W, H * 10
 
End Sub

Public Sub DisplayGameInfoNextShape()

 Dim NextShape As Shape
 Dim W%, H%
 
 If NextPiece.Id > 0 Then
 
 W = CellTextWidthPixels
 H = CellTextHeightPixels
 
 NextShape = NextPiece
 NextShape.X = RIGHT_WALL_X + 2
 NextShape.Y = 11

 DrawShape2OutputPlayField NextShape
 
 End If
 
End Sub

Public Sub Add2ScorePillarsClear(PillarCount%, ChainCount%)
 
 Dim ScoreResult As Long
 
 ScoreResult = 0
 
 If 0 < PillarCount And PillarCount <= 3 Then
   ScoreResult = ScoreResult + PillarCount * CLEAR_LINE_POINTS + PillarCount * LINE_COUNT_BONUS_POINTS
   AzPlaySound 3
 ElseIf PillarCount >= 4 Then
   AzPlaySound 3
   ScoreResult = ScoreResult + PillarCount * CLEAR_LINE_POINTS + PillarCount * LINE_COUNT_BONUS_POINTS + SHAPE_BONUS_POINTS
 End If
 
 If ChainCount > 1 Then
   AzPlaySound 3
   ScoreResult = ScoreResult + 1000
 End If
 
          Select Case DifficultyLevel
            Case EASY_LEVEL:
              ScoreResult = ScoreResult * 0.5
            Case NORMAL_LEVEL:
              ' ** do nothing **
            Case HARD_LEVEL:
              ScoreResult = ScoreResult * 2
            Case Else
          End Select
          
    CurrentScore = CurrentScore + ScoreResult
    
 CurrentShapesClearedCount = CurrentShapesClearedCount + PillarCount
 HundredShapesClearedLimitCount = HundredShapesClearedLimitCount + PillarCount
 
End Sub

Public Sub Add2ScoreHitBottom()
   
  CurrentScore = CurrentScore + HIT_BOTTOM_POINTS
   
End Sub

Public Sub UserInteraction2()

  Dim i As Integer
  
  GeneralKeyDelayCounter = GeneralKeyDelayCounter + 1
  
  If GeneralKeyDelayCounter >= GeneralKeyDelayCounterMax Then
   If CurrentGameState = GAME_STATE_BEGIN Or CurrentGameState = GAME_STATE_GAME_OVER Then
     GeneralKeyDelayCounter = 0
    
     For i = 0 To 9
       If Option_Flag_List(i) Then
         CurrentSpeed = i
       End If
     Next i
     
     If Difficulty_Change_Flag Then
       
        Select Case DifficultyLevel
          Case EASY_LEVEL:
             DifficultyLevel = NORMAL_LEVEL
          Case NORMAL_LEVEL:
             DifficultyLevel = HARD_LEVEL
          Case HARD_LEVEL:
             DifficultyLevel = EASY_LEVEL
          Case Else
             DifficultyLevel = NORMAL_LEVEL
        End Select
        
     Else
        Difficulty_Change_Flag = 0
     End If
     
     If Option_Running_Flag Then
        CurrentGameState = GAME_STATE_RUNNING
        ClearStaticPlayField
        ClearOutputPlayField
        StartRandomShapeFlag = 1
        CurrentScore = 0
        CurrentShapesClearedCount = 0
        HundredShapesClearedLimitCount = 0
     End If
     
     FallSpeedIncrement = CurrentSpeed
     
   ElseIf CurrentGameState = GAME_STATE_RUNNING Then
          
     If Option_Paused_Flag Then
        Option_Paused_Flag = 0
        CurrentGameState = GAME_STATE_PAUSED
     End If
   
   ElseIf CurrentGameState = GAME_STATE_PAUSED Then
   
     If Option_Paused_Flag Then
        Option_Paused_Flag = 0
        CurrentGameState = GAME_STATE_RUNNING
     End If
   End If
   
  End If

End Sub

Public Sub DisplayGameStateMessage(GameState As Integer)

 Dim W%, H%
 
 W = CellTextWidthPixels
 H = CellTextHeightPixels
 
  Select Case GameState
  
     Case GAME_STATE_BEGIN:
          Bitmap_DrawText "Welcome", LEFT_WALL_X * W + 7 * W, H * 6
          Bitmap_DrawText "  to   ", LEFT_WALL_X * W + 7 * W, H * 7
          Bitmap_DrawText "Pillars", LEFT_WALL_X * W + 7 * W, H * 8
          
     Case GAME_STATE_PAUSED:
          Bitmap_DrawText " Paused ", LEFT_WALL_X * W + 7 * W, H * 6
          
     Case GAME_STATE_GAME_OVER:
          Bitmap_DrawText "  Game  ", LEFT_WALL_X * W + 7 * W, H * 6
          Bitmap_DrawText "  Over  ", LEFT_WALL_X * W + 7 * W, H * 7
          
  End Select
  
End Sub

Public Sub IncreaseSpeed()

     If HundredShapesClearedLimitCount >= 100 Then
        CurrentSpeed = CurrentSpeed + 1
        FallSpeedIncrement = CurrentSpeed
        HundredShapesClearedLimitCount = 0
        AzPlaySound 1
        BackGroundPictureIndex = Rand(9, 14)
     End If
End Sub

Public Function AnimationDelay()

   AnimationDelay = 0
   
   RefreshDelayCounter = RefreshDelayCounter + 1
   
   If RefreshDelayCounter > RefreshDelayCounterMax Then
      PausePlayAnimationStateFlag = 0
      RefreshDelayCounter = 0
      AnimationDelay = 1
   End If
   
   
End Function

Public Sub ShiftBlocksDown()

Dim Y%, X%, i%

For i = 1 To 10
  For X = LEFT_WALL_X + 1 To RIGHT_WALL_X - 1
    For Y = PLAYFIELD_HEIGHT - 2 To 1 Step -1

       If StaticPlayField(X, Y) = 0 Then
          StaticPlayField(X, Y) = StaticPlayField(X, Y - 1)
          StaticPlayField(X, Y - 1) = 0
      End If

    Next Y
  Next X
Next i

End Sub
